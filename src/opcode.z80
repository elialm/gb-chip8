section "Chip8 instruction implementation", rom0

; Note: for instructions that have an x register will have its
;       pointer kept in the Gameboy's de register. This is only
;       true when the x register is specified at $-x-- or if
;       explicitly stated.

; Note: the bc register contains the opcode being dispatched
;       if not specified otherwise.

; $00E0 dispatcher
;   $00E0: CLS
inst_00E0_dispatcher::
    ret

; $00EE dispatcher
;   $00EE: RET
inst_00EE_dispatcher::
    ; Load stack pointer
    ld h, high(c8_stack)
    ldh a, [c8_cpu_sp]
    ld l, a

    ; Set program counter
    dec l
    ld a, [hl-]
    ldh [c8_cpu_pc+1], a
    ld a, [hl]
    ldh [c8_cpu_pc], a

    ; Update stack pointer
    ld a, l
    ldh [c8_cpu_sp], a

    ret

; $1--- dispatcher
;   $1nnn: JP addr
inst_1xxx_dispatcher::
    ; Calculate high address byte
    ld a, b
    and a, $0F
    or a, high(c8_rom) & $F0

    ; Set program counter
    ldh [c8_cpu_pc+1], a
    ld a, c
    ldh [c8_cpu_pc], a

    ret

; $2--- dispatcher
;   $2nnn: CALL addr
inst_2xxx_dispatcher::
    ; Load stack pointer
    ld h, high(c8_stack)
    ldh a, [c8_cpu_sp]
    ld l, a

    ; Load current program counter to top of stack
    ; The program counter is already incremented to point to the next instruction
    ldh a, [c8_cpu_pc]
    ld [hl+], a
    ldh a, [c8_cpu_pc+1]
    ld [hl+], a

    ; Update stack pointer
    ld a, l
    ldh [c8_cpu_sp], a

    ; The rest is same as the $1nnn routine, so just jump to that
    jr inst_1xxx_dispatcher

; $3--- dispatcher
;   $3xkk: SE Vx, byte
inst_3xxx_dispatcher::
    ; Load and compare Vx register
    ld a, [de]
    cp a, c
    ret nz

    ; Skip next instruction
    jr inst_skip_next

; $4--- dispatcher
;   $4xkk: SNE Vx, byte
inst_4xxx_dispatcher::
    ; Load and compare Vx register
    ld a, [de]
    cp a, c
    ret z

    ; Skip next instruction
    jr inst_skip_next

; $5--- dispatcher
;   $5xy0: SE Vx, Vy
inst_5xxx_dispatcher::
    ; Assert opcode lower byte is $-0
    ld a, $0F
    and a, c
    jp nz, inst_fault_handler

    ; Calculate Vy pointer
    ld h, $FF           ; Chip8 registers sit in HRAM
    ld l, c
    swap l

    ; Load and compare Vx and Vy
    ld a, [de]
    cp a, [hl]
    ret nz

    ; Skip next instruction
    jr inst_skip_next

inst_skip_next:
    ; Increment program counter low byte twice
    ldh a, [c8_cpu_pc]
    add a, $02
    ldh [c8_cpu_pc], a
    ret nc

    ; Increment program counter high byte (overflow)
    ldh a, [c8_cpu_pc+1]
    inc a
    ldh [c8_cpu_pc+1], a

    ret

; $6--- dispatcher
;   $6xkk: LD Vx, byte
inst_6xxx_dispatcher::
    ; Copy kk into Vx
    ld a, c
    ld [de], a

    ret

; $7--- dispatcher
;   $7xkk: ADD Vx, byte
inst_7xxx_dispatcher::
    ; Add kk to Vx
    ld a, [de]
    add a, c
    ld [de], a

    ret

; The following will hold true at $8--- dispatcher entry
;   hl = dispatcher address
;   bc = pointer to used register for y
;   de = pointer to used register for x

; $8--0 dispatcher
;   $8xy0: LD Vx, Vy
inst_8xx0_dispatcher::
    ; Copy Vy to Vx
    ld a, [bc]
    ld [de], a

    ret

; $8--1 dispatcher
;   $8xy1: OR Vx, Vy
inst_8xx1_dispatcher::
    ; Calculate Vx | Vy and put value in Vx
    ld a, [de]
    ld h, a
    ld a, [bc]
    or a, h
    ld [de], a

    ret

; $8--2 dispatcher
;   $8xy2: AND Vx, Vy
inst_8xx2_dispatcher::
    ; Calculate Vx & Vy and put value in Vx
    ld a, [de]
    ld h, a
    ld a, [bc]
    and a, h
    ld [de], a

    ret

; $8--3 dispatcher
;   $8xy3: XOR Vx, Vy
inst_8xx3_dispatcher::
    ; Calculate Vx ^ Vy and put value in Vx
    ld a, [de]
    ld h, a
    ld a, [bc]
    xor a, h
    ld [de], a

    ret

; $8--4 dispatcher
;   $8xy4: ADD Vx, Vy
inst_8xx4_dispatcher::
    ; Calculate Vx + Vy and put value in Vx
    ld a, [de]
    ld h, a
    ld a, [bc]
    add a, h
    ld [de], a

    ; Set VF register
    rla         ; Bit 0 is now the carry
    and a, $01
    ldh [c8_cpu_reg_vf], a

    ret

; $8--5 dispatcher
;   $8xy5: SUB Vx, Vy
inst_8xx5_dispatcher::
    ; Calculate Vx - Vy and put value in Vx
    ld a, [bc]
    ld h, a
    ld a, [de]
    sub a, h
    ld [de], a

    ; Set VF register
    ccf
    rla         ; Bit 0 is now the inverted carry
    and a, $01
    ldh [c8_cpu_reg_vf], a

    ret

; $8--6 dispatcher
;   $8xy6: SHR Vx {, Vy}
inst_8xx6_dispatcher::
    ; Calculate Vx >> 1 and put value in Vx
    ld a, [de]
    srl a
    ld [de], a

    ; Set VF register
    rla         ; Bit 0 is now the carry
    and a, $01
    ldh [c8_cpu_reg_vf], a

    ret

; $8--7 dispatcher
;   $8xy7: SUBN Vx, Vy
inst_8xx7_dispatcher::
    ; Calculate Vy - Vx and put value in Vx
    ld a, [de]
    ld h, a
    ld a, [bc]
    sub a, h
    ld [de], a

    ; Set VF register
    ccf
    rla         ; Bit 0 is now the inverted carry
    and a, $01
    ldh [c8_cpu_reg_vf], a

    ret

; $8--E dispatcher
;   $8xyE: SHL Vx {, Vy}
inst_8xxE_dispatcher::
    ; Calculate Vx >> 1 and put value in Vx
    ld a, [de]
    sla a
    ld [de], a

    ; Set VF register
    rla         ; Bit 0 is now the carry
    and a, $01
    ldh [c8_cpu_reg_vf], a

    ret

; $9--- dispatcher
;   $9xy0: SNE Vx, Vy
inst_9xxx_dispatcher::
    ; Assert opcode lower byte is $-0
    ld a, $0F
    and a, c
    jp nz, inst_fault_handler

    ; Calculate Vy pointer
    ld h, $FF           ; Chip8 registers sit in HRAM
    ld l, c
    swap l

    ; Load and compare Vx and Vy
    ld a, [de]
    cp a, [hl]
    ret nz

    ; Skip next instruction
    jp inst_skip_next

; $A--- dispatcher
;   $Annn: LD I, addr
inst_Axxx_dispatcher::
    ; Load low byte to I
    ld a, c
    ld [c8_cpu_reg_i], a

    ; Load high byte to I
    ld a, $0F
    and a, b
    ld [c8_cpu_reg_i], a

    ret

; $B--- dispatcher
;   $Bnnn: JP V0, addr
inst_Bxxx_dispatcher::
    ; Add V0 to bc register (ignore highest nibble)
    ld a, [c8_cpu_reg_gp]   ; Load value of V0
    add a, c
    ld c, a
    jr nc, .skip_high_inc
    inc b
.skip_high_inc:

    ; The rest is same as the $1nnn routine, so just jump to that
    jp inst_1xxx_dispatcher

; $C--- dispatcher
;   $Cxkk: RND Vx, byte
inst_Cxxx_dispatcher::
    ; Generate random number and AND number with kk
    call rand
    and a, c

    ; Load number to Vx
    ld [de], a

    ret

; $D--- dispatcher
;   $Dxyn: DRW Vx, Vy, nibble
inst_Dxxx_dispatcher::
    ret

; $E-9E dispatcher
;   $Ex9E: SKP Vx
inst_Ex9E_dispatcher::
    ret

; $E-A1 dispatcher
;   $ExA1: SKNP Vx
inst_ExA1_dispatcher::
    ret

; The following will hold true at $F--- dispatcher entry
;   hl = dispatcher address
;   bc = running opcode
;   de = pointer to used register for x

; $F-07 dispatcher
;   Fx07: LD Vx, DT
inst_Fx07_dispatcher::
    ; Load Vx into DT
    ld a, [de]
    ld [c8_cpu_dt], a

    ret

; $F-0A dispatcher
;   Fx0A: LD Vx, K
inst_Fx0A_dispatcher::
    ret

; $F-15 dispatcher
;   Fx15: LD DT, Vx
inst_Fx15_dispatcher::
    ; Load DT into Vx
    ld a, [c8_cpu_dt]
    ld [de], a

    ret

; $F-18 dispatcher
;   Fx18: LD ST, Vx
inst_Fx18_dispatcher::
    ; Load ST into Vx
    ld a, [c8_cpu_st]
    ld [de], a

    ret

; $F-1E dispatcher
;   Fx1E: ADD I, Vx
inst_Fx1E_dispatcher::
    ; Add Vx and lower byte of I
    ld a, [de]
    ld h, a
    ld a, [c8_cpu_reg_i]
    add a, h
    ld [c8_cpu_reg_i], a

    ; Increment high byte of I if carry
    jr nc, .skip_high_increment
    ld a, [c8_cpu_reg_i+1]
    inc a
    ld [c8_cpu_reg_i+1], a
.skip_high_increment:

    ret

; $F-29 dispatcher
;   Fx29: LD F, Vx
inst_Fx29_dispatcher::
    ret

; $F-33 dispatcher
;   Fx33: LD B, Vx
inst_Fx33_dispatcher::
    ; Load Vx
    ld b, $00
    ld a, [de]

    ; Subtract 100 if a >= 100
    cp a, 100
    jr c, .skip_sub
    sub a, 100
    inc b

    ; Subtract 100 again if a >= 100
    cp a, 100
    jr c, .skip_sub
    sub a, 100
    inc b
.skip_sub:

    ; Get I value as pointer
    ld c, a
    ldh a, [c8_cpu_reg_i]
    ld e, a
    ldh a, [c8_cpu_reg_i+1]
    ld d, a

    ; Store hundreds digit at I
    ld a, b
    ld [de], a
    inc de

    ; TODO: I register is not to be used as pointer yet as
    ;       the program memory is still located in ROM. This
    ;       is yet to be fixed.

    ; Use remaining as offset to get lower byte
    ld b, $00
    ld hl, c8_bcd_start_lut
    add hl, bc
    ld c, hl

    ; Get upper nibble and write it to I+1
    ld a, c
    swap a
    and a, $0F
    ld [de], a
    inc de

    ; Get lower nibble and write it to I+2
    ld a, c
    and a, $0F
    ld [de], a

    ret

; $F-55 dispatcher
;   Fx55: LD [I], Vx
inst_Fx55_dispatcher::
    ret

; $F-65 dispatcher
;   Fx65: LD Vx, [I]
inst_Fx65_dispatcher::
    ret

section "Chip8 BCD lookup table", rom0

c8_bcd_start_lut:
db $00,$01,$02,$03,$04,$05,$06,$07
db $08,$09,$10,$11,$12,$13,$14,$15
db $16,$17,$18,$19,$20,$21,$22,$23
db $24,$25,$26,$27,$28,$29,$30,$31
db $32,$33,$34,$35,$36,$37,$38,$39
db $40,$41,$42,$43,$44,$45,$46,$47
db $48,$49,$50,$51,$52,$53,$54,$55
db $56,$57,$58,$59,$60,$61,$62,$63
db $64,$65,$66,$67,$68,$69,$70,$71
db $72,$73,$74,$75,$76,$77,$78,$79
db $80,$81,$82,$83,$84,$85,$86,$87
db $88,$89,$90,$91,$92,$93,$94,$95
db $96,$97,$98,$99

; ,$00,$01,$02,$03
; db $04,$05,$06,$07,$08,$09,$10,$11
; db $12,$13,$14,$15,$16,$17,$18,$19
; db $20,$21,$22,$23,$24,$25,$26,$27
; db $28,$29,$30,$31,$32,$33,$34,$35
; db $36,$37,$38,$39,$40,$41,$42,$43
; db $44,$45,$46,$47,$48,$49,$50,$51
; db $52,$53,$54,$55,$56,$57,$58,$59
; db $60,$61,$62,$63,$64,$65,$66,$67
; db $68,$69,$70,$71,$72,$73,$74,$75
; db $76,$77,$78,$79,$80,$81,$82,$83
; db $84,$85,$86,$87,$88,$89,$90,$91
; db $92,$93,$94,$95,$96,$97,$98,$99
; db $00,$01,$02,$03,$04,$05,$06,$07
; db $08,$09,$10,$11,$12,$13,$14,$15
; db $16,$17,$18,$19,$20,$21,$22,$23
; db $24,$25,$26,$27,$28,$29,$30,$31
; db $32,$33,$34,$35,$36,$37,$38,$39
; db $40,$41,$42,$43,$44,$45,$46,$47
; db $48,$49,$50,$51,$52,$53,$54,$55