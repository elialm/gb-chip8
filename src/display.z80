include "hardware.inc"

; Get adress of cell on virtual screen 0 and load pointer into [hl]
;	x - x coordinate
;	y - y coordinate
LOAD_CELL_SCRN0_HL: macro
	ld hl, _SCRN0 + SCRN_VX_B * \2 + \1
endm

; Wait for V-Blank and then disable the LCD
; Executes halt and waits for V-blank interrupt
LCD_DISABLE_IRQ: macro
	halt
    nop
    ld hl, rLCDC
    res 7, [hl]
endm

; Wait for V-Blank and then disable the LCD
; Loops checking the mode bits in the STAT register
LCD_DISABLE_LOOP: macro
	ld hl, rSTAT
    ld b, $03
    ld c, $01
.loop\@:
    ld a, [hl]
    and a, b
    cp a, c
    jr nz, .loop\@
    ld hl, rLCDC
    res 7, [hl]
endm

; Wait for V-Blank
LCD_AWAIT_VBLANK: macro
	halt
    nop
endm

; Enable the LCD
LCD_ENABLE: macro
	ld hl, rLCDC
    set 7, [hl]
endm

section "Chip8 display routines", rom0

c8_display_init::
    ; Copy sprite data to Chip8 memory
    
    ; Initialise copy loop
    ld e, 16    ; Copy 16 sprites (1 mapped to each nibble value)

    ; Call memcpy to copy one sprite
.sprite_loop:
    ld d, 5
    ld hl, c8_mem           ; Start sprites at Chip8 address $000
    ld bc, c8_char_sprites
    call memcpy

    ; Copy 3 additional padding bytes
    xor a, a
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a

    ; Check loop condition
    dec e
    jr nz, .sprite_loop

    ; Perform Gameboy LCD initialisation

    ; Disable LCD
    LCD_DISABLE_LOOP

    ; Zero tile data
    xor a, a
    ld d, a         ; Clears 16 tiles (16 tiles * 16 = 256 bytes)
    ld hl, _VRAM    ; Points to tile map
    call memset
    ld d, 10 * 16   ; Clears remaining 10 tiles
    call memset

    ; Generate tile data
    ld d, $01
    ld hl, $8010

.tile_gen_loop:
    ; Set high byte of translation table pointer
    ld b, high(c8_sprite_translation_table)

    ; Load a with translated tile from lower nibble
    ld a, d
    ld c, low(c8_sprite_translation_table)
    and a, $0F
    or a, c
    ld c, a
    ld a, [bc]

    ; Load translated tile to top pixel row
    ld [hl+], a
    inc hl
    ld [hl+], a
    inc hl

    ; Load a with translated tile from upper nibble
    ld a, d
    ld c, low(c8_sprite_translation_table)
    swap a
    and a, $0F
    or a, c
    ld c, a
    ld a, [bc]

    ; Load translated tile to 2nd pixel row
    ld [hl+], a
    inc hl
    ld [hl+], a
    inc hl

    ; Offset hl to point to next tile
    ld bc, $0008
    add hl, bc

    ; Check loop condition
    inc d
    jr nz, .tile_gen_loop

    ; Copy tiles $00-$7F in $8000 to $9000
    ld bc, $8000
    call c8_display_copy_tiles
    call c8_display_copy_tiles
    call c8_display_copy_tiles
    call c8_display_copy_tiles

    ; Re-enable the LCD
    LCD_ENABLE

    ret

; Copy tile map in $8000 to $9000
;   hl - dest address ($9000, $9200, $9400, $9600)
;   hl - src address ($8000, $8200, $8400, $8600)
c8_display_copy_tiles:
    ; Initialise loop counter
    ld d, $00

    ; Copy 1 byte and skip 2nd color ID byte
.copy_loop:
    ld a, [bc]
    ld [hl+], a
    inc bc
    inc bc
    inc hl

    ; Check loop condition
    dec d
    jr nz, .copy_loop

    ret

; Character sprites which are copied to Chip8 memory during initialisation.
; Each character is made from 8x5 bytes
c8_char_sprites::
    db $F0,$90,$90,$90,$F0  ; Sprite "0"
    db $20,$60,$20,$20,$70  ; Sprite "1"
    db $F0,$10,$F0,$80,$F0  ; Sprite "2"
    db $F0,$10,$F0,$10,$F0  ; Sprite "3"
    db $90,$90,$F0,$10,$10  ; Sprite "4"
    db $F0,$80,$F0,$10,$F0  ; Sprite "5"
    db $F0,$80,$F0,$90,$F0  ; Sprite "6"
    db $F0,$10,$20,$40,$40  ; Sprite "7"
    db $F0,$90,$F0,$90,$F0  ; Sprite "8"
    db $F0,$90,$F0,$10,$F0  ; Sprite "9"
    db $F0,$90,$F0,$90,$90  ; Sprite "A"
    db $E0,$90,$E0,$90,$E0  ; Sprite "B"
    db $F0,$80,$80,$80,$F0  ; Sprite "C"
    db $E0,$90,$90,$90,$E0  ; Sprite "D"
    db $F0,$80,$F0,$80,$F0  ; Sprite "E"
    db $F0,$80,$F0,$80,$80  ; Sprite "F"

section "Chip8 sprite translation table", rom0, align[$04]

; Table used to translate Chip8 sprites to Gameboy tile data
c8_sprite_translation_table:
    db $00,$03,$0C,$0F
    db $30,$33,$3C,$3F
    db $C0,$C3,$CC,$CF
    db $F0,$F3,$FC,$FF
