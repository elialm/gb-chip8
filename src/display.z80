section "Chip8 display routines", rom0

C8_SPRITE_START = c8_mem

; Copy sprite data to Chip8 memory
c8_copy_sprites::
    ; Initialise loop
    ld e, 16    ; Copy 16 sprites (1 mapped to each nibble value)

    ; Call memcpy to copy one sprite
.sprite_loop:
    ld d, 5
    ld hl, C8_SPRITE_START
    ld bc, c8_char_sprites
    call memcpy

    ; Copy 3 additional padding bytes
    xor a, a
    ld [hl+], a
    ld [hl+], a
    ld [hl+], a

    ; Check loop condition
    dec e
    jr nz, .sprite_loop
    ret

c8_update_display::
    ret

; Table used to translate Chip8 sprites to Gameboy tile data
c8_sprite_translation_table:
    db $00,$03,$0C,$0F
    db $30,$33,$3C,$3F
    db $C0,$C3,$CC,$CF
    db $F0,$F3,$FC,$FF

; Character sprites which are copied to Chip8 memory during initialisation.
; Each character is made from 8x5 bytes
c8_char_sprites::
    db $F0,$90,$90,$90,$F0  ; Sprite "0"
    db $20,$60,$20,$20,$70  ; Sprite "1"
    db $F0,$10,$F0,$80,$F0  ; Sprite "2"
    db $F0,$10,$F0,$10,$F0  ; Sprite "3"
    db $90,$90,$F0,$10,$10  ; Sprite "4"
    db $F0,$80,$F0,$10,$F0  ; Sprite "5"
    db $F0,$80,$F0,$90,$F0  ; Sprite "6"
    db $F0,$10,$20,$40,$40  ; Sprite "7"
    db $F0,$90,$F0,$90,$F0  ; Sprite "8"
    db $F0,$90,$F0,$10,$F0  ; Sprite "9"
    db $F0,$90,$F0,$90,$90  ; Sprite "A"
    db $E0,$90,$E0,$90,$E0  ; Sprite "B"
    db $F0,$80,$80,$80,$F0  ; Sprite "C"
    db $E0,$90,$90,$90,$E0  ; Sprite "D"
    db $F0,$80,$F0,$80,$F0  ; Sprite "E"
    db $F0,$80,$F0,$80,$80  ; Sprite "F"