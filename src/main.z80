include "hardware.inc"

section "Initialisation", rom0[$0150]

; Initialisation
__main::
    di                  ; Disable interrupts
    ld sp, stack_top    ; Initialise stack pointer

; Initialise the emulator
c8_init:
    ; Zero all cpu variables
    ld d, 25
    ld hl, c8_cpu_reg_gp
    xor a, a
    call memset

    ; Initialise program counter
    ; Low byte is already $00
    ld a, high(c8_rom)      ; Chip8 programs usually start at $200
    ldh [c8_cpu_pc+1], a

    ; Initialise stack pointer
    ; Low byte is already $00
    ld a, high(c8_stack)
    ldh [c8_cpu_sp+1], a

    ; Initialise RNG
    ld a, $6E
    call rand_init

    ; Loop Chip cycles
.loop_cycle:
    call c8_cycle
    jr .loop_cycle

; Run a Chip8 cycle
; This includes:
;   - Running the next opcode
c8_cycle:
    ; Load program counter
    ldh a, [c8_cpu_pc]
    ld l, a
    ldh a, [c8_cpu_pc+1]
    ld h, a

    ; Load instruction (Chip8 is big-endian)
    ld b, [hl]
    inc hl
    ld c, [hl]
    inc hl

    ; Store new program counter
    ld a, h
    ldh [c8_cpu_pc+1], a
    ld a, l
    ldh [c8_cpu_pc], a

    ; Decode and run opcode
    call c8_op_decode_n_execute

    ret

; Opcode is in bc register
c8_op_decode_n_execute:
    ; Get highest nibble for subdispatcher
    ld a, b
    swap a
    and a, $0F
    
    ; Load subdispatcher number as 16-bit offset
    ld e, a
    xor a, a
    ld d, a

    ; Add this offset thrice to dispatcher table start
    ld hl, .subdispatcher_table
    add hl, de
    add hl, de
    add hl, de

    ; Most opcodes have some format $-x--, where x is a register used for the operation
    ; Here, the opcode is assumed to have a register specified there
    ; Then, opcodes that use it won't have to extract it themselves
    ; For opcodes that don't have an x register at this location, this value can be ignored
    ld d, $FF                   ; Chip8 registers sit in HRAM
    ld a, b
    and a, $0F
    add a, low(c8_cpu_reg_gp)   ; Add registers base pointer
    ld e, a

    ; Jump to selected subdispatcher
    jp hl

.subdispatcher_table:
    jp inst_0xxx_dispatcher
    jp inst_1xxx_dispatcher
    jp inst_2xxx_dispatcher
    jp inst_3xxx_dispatcher
    jp inst_4xxx_dispatcher
    jp inst_5xxx_dispatcher
    jp inst_6xxx_dispatcher
    jp inst_7xxx_dispatcher
    jp inst_8xxx_dispatcher
    jp inst_9xxx_dispatcher
    jp inst_Axxx_dispatcher
    jp inst_Bxxx_dispatcher
    jp inst_Cxxx_dispatcher
    jp inst_Dxxx_dispatcher
    jp inst_Exxx_dispatcher
    jp inst_Fxxx_dispatcher

; $0--- dispatcher
;   $00E0: CLS
;   $00EE: RET
;   $0nnn: SYS addr
inst_0xxx_dispatcher:
    ; Ignore instruction if second highest nibble is not 0
    ; This would be the SYS instruction, but this is ignored in modern emulators
    xor a, a
    cp a, b
    ret

    ; Check if CLS instruction
    ld a, $E0
    cp a, c
    jp z, inst_00E0_dispatcher

    ; Check if RET instruction
    ld a, $EE
    cp a, c
    jp z, inst_00EE_dispatcher

    ; If code got here, unknown opcode
    jp inst_fault_handler

; $8--- dispatcher
;   $8xy0: LD Vx, Vy
;   $8xy1: OR Vx, Vy
;   $8xy2: AND Vx, Vy
;   $8xy3: XOR Vx, Vy
;   $8xy4: ADD Vx, Vy
;   $8xy5: SUB Vx, Vy
;   $8xy6: SHR Vx {, Vy}
;   $8xy7: SUBN Vx, Vy
;   $8xyE: SHL Vx {, Vy}
inst_8xxx_dispatcher:

    ; Keep copy of lower op byte for later extraction of y
    ld h, c

    ; Get lowest nibble for subdispatcher
    ld a, $0F
    and a, c
    
    ; Load subdispatcher number as 16-bit offset
    ld c, a
    xor a, a
    ld b, a

    ; Lower op byte copy is now kept in a
    ld a, h

    ; Add this offset thrice to dispatcher table start
    ld hl, .subdispatcher_table
    add hl, bc
    add hl, bc
    add hl, bc

    ; Extract dest register
    ld b, $FF                   ; Chip8 registers sit in HRAM
    and a, $F0                  ; Register already contains lower op code byte
    swap a
    add a, low(c8_cpu_reg_gp)   ; Add registers base pointer
    ld c, a

    ; Jump to selected subdispatcher
    jp hl

    ; The following will hold true at dispatcher entry
    ;   hl = dispatcher address
    ;   bc = pointer to used register for x
    ;   de = pointer to used register for y

.subdispatcher_table:
    jp inst_8xx0_dispatcher
    jp inst_8xx1_dispatcher
    jp inst_8xx2_dispatcher
    jp inst_8xx3_dispatcher
    jp inst_8xx4_dispatcher
    jp inst_8xx5_dispatcher
    jp inst_8xx6_dispatcher
    jp inst_8xx7_dispatcher
    jp inst_fault_handler
    jp inst_fault_handler
    jp inst_fault_handler
    jp inst_fault_handler
    jp inst_fault_handler
    jp inst_fault_handler
    jp inst_8xxE_dispatcher
    jp inst_fault_handler

; $E--- dispatcher
;   $Ex9E: SKP Vx
;   $ExA1: SKNP Vx
inst_Exxx_dispatcher:
    ; Check if SKP instruction
    ld a, $9E
    cp a, c
    jp z, inst_Ex9E_dispatcher

    ; Check if SKNP instruction
    ld a, $A1
    cp a, c
    jp z, inst_ExA1_dispatcher

    ; If code got here, unknown opcode
    jp inst_fault_handler

; $F--- dispatcher
;   $Fx07: LD Vx, DT
;   $Fx0A: LD Vx, K
;   $Fx15: LD DT, Vx
;   $Fx18: LD ST, Vx
;   $Fx1E: ADD I, Vx
;   $Fx29: LD F, Vx
;   $Fx33: LD B, Vx
;   $Fx55: LD [I], Vx
;   $Fx65: LD Vx, [I]
inst_Fxxx_dispatcher:

    ; Initialise code pointer
    ld hl, .dispatcher_codes - 2
.loop_dispatcher_compare:
    ; Skip previous pointer
    inc hl
    inc hl

    ; Check if there are no more codes left to check
    ld a, [hl+]
    cp a, d
    jp z, inst_fault_handler

    ; Check against current instruction
    cp a, c
    jp nz, .loop_dispatcher_compare

    ; The following will hold true at dispatcher entry
    ;   hl = dispatcher address
    ;   bc = $Fxyy, with yy being the selected opcode
    ;   de = pointer to used register for x

    ; Jump to assoctiated sub-routine
    ld a, [hl+]
    ld h, [hl]
    ld l, a
    jp hl

; Dispatcher codes are 3-bytes per entry with a $00 termination byte
;   code[0] - opcode lower byte
;   code[1] - dispatcher low address bytes
;   code[2] - dispatcher high address bytes
.dispatcher_codes:
    db $07
    dw inst_Fx07_dispatcher
    db $0A
    dw inst_Fx0A_dispatcher
    db $15
    dw inst_Fx15_dispatcher
    db $18
    dw inst_Fx18_dispatcher
    db $1E
    dw inst_Fx1E_dispatcher
    db $29
    dw inst_Fx29_dispatcher
    db $33
    dw inst_Fx33_dispatcher
    db $55
    dw inst_Fx55_dispatcher
    db $65
    dw inst_Fx65_dispatcher
    db $00

inst_fault_handler::
    halt

section "Chip8 state", hram

; CPU status

; General purpose registers (16 x 8-bit)
c8_cpu_reg_gp::
    ds 16
; General purpose registers (1 x 16-bit)
c8_cpu_reg_i::
    ds 2
; CPU flag register
c8_cpu_reg_vf::
    ds 1
; Delay timer
c8_cpu_dt::
    ds 1
; Sound timer
c8_cpu_st::
    ds 1
; Program counter
c8_cpu_pc::
    ds 2
; Stack pointer
c8_cpu_sp::
    ds 1

section "Chip8 stack", wram0, align[$08]

; Chip8 stack
c8_stack::
    ds 32